// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	transaction "github.com/daniel5u/suisei/domain/transaction"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Fetch provides a mock function with given fields:
func (_m *Repository) Fetch() ([]transaction.Domain, error) {
	ret := _m.Called()

	var r0 []transaction.Domain
	if rf, ok := ret.Get(0).(func() []transaction.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *Repository) GetByID(id int) (transaction.Domain, error) {
	ret := _m.Called(id)

	var r0 transaction.Domain
	if rf, ok := ret.Get(0).(func(int) transaction.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(transaction.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: transactionDomain
func (_m *Repository) Store(transactionDomain transaction.Domain) (transaction.Domain, error) {
	ret := _m.Called(transactionDomain)

	var r0 transaction.Domain
	if rf, ok := ret.Get(0).(func(transaction.Domain) transaction.Domain); ok {
		r0 = rf(transactionDomain)
	} else {
		r0 = ret.Get(0).(transaction.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(transaction.Domain) error); ok {
		r1 = rf(transactionDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: transactionDomain, id
func (_m *Repository) Update(transactionDomain transaction.Domain, id int) (transaction.Domain, error) {
	ret := _m.Called(transactionDomain, id)

	var r0 transaction.Domain
	if rf, ok := ret.Get(0).(func(transaction.Domain, int) transaction.Domain); ok {
		r0 = rf(transactionDomain, id)
	} else {
		r0 = ret.Get(0).(transaction.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(transaction.Domain, int) error); ok {
		r1 = rf(transactionDomain, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
