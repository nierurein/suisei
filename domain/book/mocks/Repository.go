// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	book "github.com/daniel5u/suisei/domain/book"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *Repository) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields:
func (_m *Repository) Fetch() ([]book.Domain, error) {
	ret := _m.Called()

	var r0 []book.Domain
	if rf, ok := ret.Get(0).(func() []book.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]book.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *Repository) GetByID(id int) (book.Domain, error) {
	ret := _m.Called(id)

	var r0 book.Domain
	if rf, ok := ret.Get(0).(func(int) book.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(book.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTitle provides a mock function with given fields: title
func (_m *Repository) GetByTitle(title string) (book.Domain, error) {
	ret := _m.Called(title)

	var r0 book.Domain
	if rf, ok := ret.Get(0).(func(string) book.Domain); ok {
		r0 = rf(title)
	} else {
		r0 = ret.Get(0).(book.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: bookDomain
func (_m *Repository) Store(bookDomain book.Domain) (book.Domain, error) {
	ret := _m.Called(bookDomain)

	var r0 book.Domain
	if rf, ok := ret.Get(0).(func(book.Domain) book.Domain); ok {
		r0 = rf(bookDomain)
	} else {
		r0 = ret.Get(0).(book.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(book.Domain) error); ok {
		r1 = rf(bookDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: bookDomain, id
func (_m *Repository) Update(bookDomain book.Domain, id int) (book.Domain, error) {
	ret := _m.Called(bookDomain, id)

	var r0 book.Domain
	if rf, ok := ret.Get(0).(func(book.Domain, int) book.Domain); ok {
		r0 = rf(bookDomain, id)
	} else {
		r0 = ret.Get(0).(book.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(book.Domain, int) error); ok {
		r1 = rf(bookDomain, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
